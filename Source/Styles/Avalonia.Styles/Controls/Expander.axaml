<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:Avalonia.Styles">
    <!--  Add Resources Here  -->

    <!--  Shared header/content  -->
    <x:Double x:Key="ExpanderMinHeight">48</x:Double>

    <!--  Header  -->
    <HorizontalAlignment x:Key="ExpanderHeaderHorizontalContentAlignment">Stretch</HorizontalAlignment>
    <VerticalAlignment x:Key="ExpanderHeaderVerticalContentAlignment">Center</VerticalAlignment>
    <Thickness x:Key="ExpanderHeaderPadding">16,0,0,0</Thickness>
    <Thickness x:Key="ExpanderHeaderBorderThickness">1</Thickness>
    <Thickness x:Key="ExpanderChevronBorderThickness">0</Thickness>
    <Thickness x:Key="ExpanderChevronMargin">20,0,8,0</Thickness>
    <x:Double x:Key="ExpanderChevronButtonSize">32</x:Double>

    <!--  Content  -->
    <Thickness x:Key="ExpanderContentPadding">16</Thickness>
    <Thickness x:Key="ExpanderContentLeftBorderThickness">1,1,0,1</Thickness>
    <Thickness x:Key="ExpanderContentUpBorderThickness">1,1,1,0</Thickness>
    <Thickness x:Key="ExpanderContentRightBorderThickness">0,1,1,1</Thickness>
    <Thickness x:Key="ExpanderContentDownBorderThickness">1,0,1,1</Thickness>

    <ControlTheme x:Key="FluentExpanderToggleButtonTheme" TargetType="ToggleButton">
        <!--<Setter Property="Background" Value="{DynamicResource ExpanderHeaderBackground}" />-->
        <!--<Setter Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />-->
        <!--<Setter Property="BorderThickness" Value="{DynamicResource ExpanderHeaderBorderThickness}" />-->
        <!--<Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />-->
        <!--<Setter Property="Padding" Value="{DynamicResource ExpanderHeaderPadding}" />-->
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.CaptionBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.CaptionForeground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:LayoutKeys.CornerRadius}}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static h:LayoutKeys.Padding}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border x:Name="ToggleButtonBackground"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid x:Name="ToggleButtonGrid" ColumnDefinitions="*,Auto">
                        <ContentPresenter x:Name="PART_ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Foreground="{TemplateBinding Foreground}" />
                        <Border x:Name="ExpandCollapseChevronBorder"
                                Grid.Column="1"
                                Width="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                BorderThickness="0"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Path x:Name="ExpandCollapseChevron"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  RenderTransformOrigin="50%,50%"
                                  Stretch="None"
                                  Stroke="{TemplateBinding Foreground}"
                                  StrokeThickness="1">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^[Tag=expanded] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.0625">
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <Style Selector="^[Tag=collapsed] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.0625">
                    <KeyFrame Cue="0%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="0" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <!--  PointerOver  -->
        <Style Selector="^:pointerover /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
            <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushTitle}}" />-->
        </Style>
        <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#ExpandCollapseChevronBorder">
            <!--<Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />-->
            <!--<Setter Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrushPointerOver}" />-->
        </Style>
        <Style Selector="^:pointerover /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        </Style>

        <!--  Pressed  -->
        <Style Selector="^:pressed /template/ Border#ToggleButtonBackground">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Pressed}}" />

        </Style>
        <Style Selector="^:pressed /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Pressed}}" />
        </Style>
        <Style Selector="^:pressed /template/ Border#ExpandCollapseChevronBorder">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Pressed}}" />
        </Style>
        <Style Selector="^:pressed /template/ Path#ExpandCollapseChevron">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Pressed}}" />
        </Style>

        <!--  Disabled  -->
        <Style Selector="^:disabled /template/ Border#ToggleButtonBackground">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Disabled}}" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Disabled}}" />
        </Style>
        <Style Selector="^:disabled /template/ Border#ExpandCollapseChevronBorder">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Disabled}}" />
        </Style>
        <Style Selector="^:disabled /template/ Path#ExpandCollapseChevron">
            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:LayoutKeys.Disabled}}" />
        </Style>

    </ControlTheme>

    <ControlTheme x:Key="FluentExpanderToggleButtonUpTheme"
                  BasedOn="{StaticResource FluentExpanderToggleButtonTheme}"
                  TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 7 L 7 0 L 14 7" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="FluentExpanderToggleButtonDownTheme"
                  BasedOn="{StaticResource FluentExpanderToggleButtonTheme}"
                  TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 14 0" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="FluentExpanderToggleButtonLeftTheme"
                  BasedOn="{StaticResource FluentExpanderToggleButtonTheme}"
                  TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 7 0 L 0 7 L 7 14" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="FluentExpanderToggleButtonRightTheme"
                  BasedOn="{StaticResource FluentExpanderToggleButtonTheme}"
                  TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 0 14" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="{x:Type Expander}" TargetType="Expander">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinWidth" Value="{DynamicResource FlyoutThemeMinWidth}" />
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}" />
        <!--<Setter Property="Background" Value="{DynamicResource ExpanderContentBackground}" />-->
        <!--<Setter Property="BorderBrush" Value="{DynamicResource ExpanderContentBorderBrush}" />-->
        <!--<Setter Property="BorderThickness" Value="{DynamicResource ExpanderContentDownBorderThickness}" />-->
        <!--<Setter Property="Padding" Value="{DynamicResource ExpanderContentPadding}" />-->

        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />-->
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:LayoutKeys.CornerRadius}}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static h:LayoutKeys.Padding}}" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--<Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />-->
        <Setter Property="Template">
            <ControlTemplate>
                <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
                    <ToggleButton x:Name="ExpanderHeader"
                                  MinHeight="{TemplateBinding MinHeight}"
                                  Content="{TemplateBinding Header}"
                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                  CornerRadius="{TemplateBinding CornerRadius}"
                                  IsChecked="{TemplateBinding IsExpanded,
                                                              Mode=TwoWay}"
                                  IsEnabled="{TemplateBinding IsEnabled}" />
                    <Border x:Name="ExpanderContent"
                            MinHeight="{TemplateBinding MinHeight}"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsVisible="{TemplateBinding IsExpanded,
                                                        Mode=TwoWay}">
                        <ContentPresenter x:Name="PART_ContentPresenter"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </DockPanel>
            </ControlTemplate>
        </Setter>

        <Style Selector="^ /template/ ToggleButton#ExpanderHeader:pressed">
            <Setter Property="RenderTransform" Value="{x:Null}" />
        </Style>

        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader, ^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>

        <Style Selector="^:expanded /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Tag" Value="expanded" />
        </Style>

        <Style Selector="^:not(:expanded) /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{Binding $parent[Expander].CornerRadius}" />
            <Setter Property="Tag" Value="collapsed" />
        </Style>
        <Style Selector="^:expanded:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:up /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:down /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:left /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
        </Style>
        <Style Selector="^:expanded:right /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
        </Style>

        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Right" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Bottom" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Left" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Top" />
        </Style>

        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{DynamicResource FluentExpanderToggleButtonLeftTheme}" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{DynamicResource FluentExpanderToggleButtonUpTheme}" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{DynamicResource FluentExpanderToggleButtonRightTheme}" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{DynamicResource FluentExpanderToggleButtonDownTheme}" />
        </Style>

        <Style Selector="^:left /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        </Style>
        <Style Selector="^:up /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        </Style>
        <Style Selector="^:right /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        </Style>
        <Style Selector="^:down /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="{DynamicResource {x:Static h:LayoutKeys.BorderThickness}}" />
        </Style>
    </ControlTheme>
</ResourceDictionary>
