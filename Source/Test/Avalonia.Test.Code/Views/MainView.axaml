<UserControl x:Class="Avalonia.Test.Code.Views.MainView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:h="https://github.com/HeBianGu"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:vm="clr-namespace:Avalonia.Test.Code.ViewModels"
             d:DesignHeight="450"
             d:DesignWidth="800"
             x:DataType="vm:MainViewModel"
             mc:Ignorable="d">
  <Design.DataContext>
    <!--
            This only sets the DataContext for the previewer in an IDE,
            to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs)
        -->
    <vm:MainViewModel />
  </Design.DataContext>

  <TabControl>
    <TabItem Header="Binding">
      <TabControl>
        <TabItem Header="ElementName">
          <StackPanel>
            <TextBox Name="tb_binding" />
            <TextBlock Text="{Binding #tb_binding.Text}" />
          </StackPanel>
        </TabItem>
        <TabItem Header="$parent">
          <Border Tag="Hello World!">
            <TextBlock Text="{Binding $parent.Tag}" />
          </Border>
        </TabItem>
        <TabItem Header="$parent[1]">
          <Border Tag="Hello World!">
            <Border>
              <TextBlock Text="{Binding $parent[1].Tag}" />
            </Border>
          </Border>
        </TabItem>
        <TabItem Header="$parent[Border]">
          <Border Tag="Hello World!">
            <Decorator>
              <TextBlock Text="{Binding $parent[Border].Tag}" />
            </Decorator>
          </Border>
        </TabItem>
        <TabItem Header="$parent[Border;1]">
          <Border Tag="Hello World!">
            <Border>
              <Decorator>
                <TextBlock Text="{Binding $parent[Border;1].Tag}" />
              </Decorator>
            </Border>
          </Border>
        </TabItem>
      </TabControl>
    </TabItem>

    <TabItem Header="Selector">
      <TabControl>
        <TabItem Header="Classes Selector">
          <UniformGrid>
            <UniformGrid.Styles>
              <Style Selector="ToggleButton">
                <Setter Property="Content" Value="Default" />
              </Style>
              <Style Selector="ToggleButton.red">
                <Setter Property="Content" Value="ToggleButton.red" />
              </Style>
              <Style Selector="ToggleButton.accent">
                <Setter Property="Content" Value="ToggleButton.accent" />
              </Style>
            </UniformGrid.Styles>
            <ToggleButton />
            <ToggleButton Classes="red" />
            <ToggleButton Classes="accent" />
          </UniformGrid>
        </TabItem>
        <TabItem Header="ToggleButton:pointerover">
          <ToggleButton>
            <ToggleButton.Styles>
              <Style Selector="ToggleButton:checked">
                <Setter Property="Content" Value="checked" />
              </Style>
              <Style Selector="ToggleButton:flyout-open">
                <Setter Property="Content" Value="flyout-open" />
              </Style>
              <Style Selector="ToggleButton:disabled">
                <Setter Property="Content" Value="disabled" />
              </Style>
              <Style Selector="ToggleButton:focus">
                <Setter Property="Content" Value="focus" />
              </Style>
              <Style Selector="ToggleButton:focus-visible">
                <Setter Property="Content" Value="focus-visible" />
              </Style>
              <Style Selector="ToggleButton:focus-within">
                <Setter Property="Content" Value="focus-within" />
              </Style>
              <Style Selector="ToggleButton:indeterminate">
                <Setter Property="Content" Value="indeterminate" />
              </Style>
              <Style Selector="ToggleButton:pointerover">
                <Setter Property="Content" Value="pointerover" />
              </Style>
              <Style Selector="ToggleButton:pressed">
                <Setter Property="Content" Value="pressed" />
              </Style>
              <Style Selector="ToggleButton:unchecked">
                <Setter Property="Content" Value="unchecked" />
              </Style>
            </ToggleButton.Styles>
          </ToggleButton>
        </TabItem>
        <TabItem Header="ToggleButton[IsChecked=True] 属性Trigger">
          <ToggleButton>
            <ToggleButton.Styles>
              <Style Selector="ToggleButton[IsChecked=True]">
                <Setter Property="Content" Value="ToggleButton[IsChecked=True]" />
              </Style>
              <Style Selector="ToggleButton[IsChecked=True]:pointerover">
                <Setter Property="Content" Value="ToggleButton[IsChecked=True]:pointerover" />
              </Style>
              <Style Selector="ToggleButton[IsChecked=False]">
                <Setter Property="Content" Value="ToggleButton[IsChecked=False]" />
              </Style>
              <Style Selector="ToggleButton[IsThreeState=True]">
                <Setter Property="Content" Value="ToggleButton[IsThreeState=True]" />
              </Style>
            </ToggleButton.Styles>
          </ToggleButton>
        </TabItem>
        <TabItem Header="Classes.flag={Binding}">
          <DockPanel>
            <!--<ComboBox Name="cb_flag" DockPanel.Dock="Top" SelectedIndex="0">
                            <system:String>red</system:String>
                            <system:String>yellow</system:String>
                            <system:String>orangle</system:String>
                        </ComboBox>-->
            <CheckBox Name="cb_flag" DockPanel.Dock="Top" />
            <ToggleButton Classes.flag="{Binding ElementName=cb_flag, Path=IsChecked}">
              <ToggleButton.Styles>
                <Style Selector="ToggleButton.flag">
                  <Setter Property="Content" Value="ToggleButton.flag" />
                </Style>
                <Style Selector="ToggleButton.red">
                  <Setter Property="Content" Value="ToggleButton.red" />
                </Style>
                <Style Selector="ToggleButton.yellow">
                  <Setter Property="Content" Value="ToggleButton.yellow" />
                </Style>
                <Style Selector="ToggleButton.orangle">
                  <Setter Property="Content" Value="ToggleButton.orangle" />
                </Style>
              </ToggleButton.Styles>
            </ToggleButton>
          </DockPanel>
        </TabItem>
        <TabItem Header="Classes.flag={Binding}">
          <DockPanel>
            <ComboBox Name="cbb_flag"
                      DockPanel.Dock="Top"
                      SelectedIndex="0">
              <system:String>red</system:String>
              <system:String>yellow</system:String>
              <system:String>orangle</system:String>
            </ComboBox>
            <ToggleButton Classes.red="{Binding ElementName=cb_flag, Path=SelectedItem}">
              <ToggleButton.Styles>
                <Style Selector="ToggleButton.red">
                  <Setter Property="Content" Value="ToggleButton.red" />
                </Style>
                <Style Selector="ToggleButton.yellow">
                  <Setter Property="Content" Value="ToggleButton.yellow" />
                </Style>
                <Style Selector="ToggleButton.orangle">
                  <Setter Property="Content" Value="ToggleButton.orangle" />
                </Style>
              </ToggleButton.Styles>
            </ToggleButton>
          </DockPanel>
        </TabItem>
      </TabControl>
    </TabItem>

    <TabItem Header="DataTemplate.Trigger">
      <DockPanel>
        <Grid Width="200"
              Height="200"
              Background="Red">
          <Grid.Styles>
            <Style Selector="Grid">
              <Style.Animations>
                <!--  IterationCount="INFINITE" 要无限次地重复动画，请使用特殊值 INFINITE  -->
                <Animation IterationCount="INFINITE" Duration="0:0:1">
                  <!--<KeyFrame Cue="0%">
                    <Setter Property="TranslateTransform.X" Value="200" />
                  </KeyFrame>
                  <KeyFrame Cue="100%">
                    <Setter Property="TranslateTransform.X" Value="-100" />
                  </KeyFrame>-->
                  <KeyFrame Cue="0%">
                    <Setter Property="Opacity" Value="0.0" />
                  </KeyFrame>
                  <KeyFrame Cue="100%">
                    <Setter Property="Opacity" Value="1.0" />
                  </KeyFrame>
                </Animation>
              </Style.Animations>
            </Style>
          </Grid.Styles>
        </Grid>
      </DockPanel>
    </TabItem>

    <TabItem Header="DataTemplate.Trigger">
      <DockPanel>
        <ListBox ItemsSource="{GetStudents}">
          <ListBox.ItemTemplate>
            <DataTemplate DataType="{x:Type h:Student}">
              <Grid>
                <TextBlock x:Name="t" Text="{Binding Name}" />
                <Interaction.Behaviors>
                  <DataTriggerBehavior Binding="{Binding Path=Name}" Value="Jim">
                    <ChangePropertyAction PropertyName="Foreground"
                                          TargetObject="{Binding ElementName=t}"
                                          Value="Red" />
                  </DataTriggerBehavior>
                </Interaction.Behaviors>
              </Grid>
            </DataTemplate>
          </ListBox.ItemTemplate>
        </ListBox>
      </DockPanel>
    </TabItem>
  </TabControl>
</UserControl>
